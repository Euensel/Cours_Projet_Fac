/*
====================================================================================
ðŸ“˜ CHAPITRE : SÃ©lection et manipulation des Ã©lÃ©ments DOM

ðŸŽ¯ Objectifs :
- SÃ©lectionner des Ã©lÃ©ments HTML
- Modifier le contenu HTML ou textuel
- GÃ©rer les attributs
- CrÃ©er, insÃ©rer et supprimer dynamiquement des Ã©lÃ©ments
====================================================================================

ðŸ”¹ MÃ‰THODES DE SÃ‰LECTION D'Ã‰LÃ‰MENTS
- document.getElementById('id')                   â†’ sÃ©lection unique
- document.getElementsByName('name')              â†’ NodeList
- document.getElementsByTagName('tag')            â†’ NodeList
- document.getElementsByClassName('class')        â†’ HTMLCollection
- document.querySelector('css selector')          â†’ 1er Ã©lÃ©ment correspondant
- document.querySelectorAll('css selector')       â†’ NodeList de tous les Ã©lÃ©ments

ðŸ”¹ PROPRIÃ‰TÃ‰S DU CONTENU
- innerHTML       â†’ contenu HTML intÃ©rieur
- outerHTML       â†’ tout lâ€™Ã©lÃ©ment + son contenu
- innerText       â†’ texte visible dans lâ€™Ã©lÃ©ment
- outerText       â†’ lâ€™Ã©lÃ©ment remplacÃ© par du texte (peu utilisÃ©)
- textContent     â†’ texte visible ou non dans lâ€™Ã©lÃ©ment

ðŸ”¹ ATTRIBUTS HTML
- hasAttribute('name')            â†’ boolÃ©en
- getAttribute('name')            â†’ valeur actuelle
- setAttribute('name', 'value')   â†’ change ou ajoute un attribut
- removeAttribute('name')         â†’ supprime un attribut

ðŸ”¹ CRÃ‰ATION ET INSERTION Dâ€™Ã‰LÃ‰MENTS
- document.createElement('tag') â†’ crÃ©e un nouvel Ã©lÃ©ment
- node.append(el)               â†’ ajoute Ã  la fin
- node.prepend(el)              â†’ ajoute au dÃ©but
- node.before(el)               â†’ avant l'Ã©lÃ©ment
- node.after(el)                â†’ aprÃ¨s l'Ã©lÃ©ment
- node.replaceWith(el)          â†’ remplace complÃ¨tement
- node.remove()                 â†’ supprime du DOM

ðŸ”¹ insertAdjacentHTML(position, html)
  - "beforebegin" â†’ avant lâ€™Ã©lÃ©ment
  - "afterbegin"  â†’ au dÃ©but Ã  lâ€™intÃ©rieur
  - "beforeend"   â†’ Ã  la fin Ã  lâ€™intÃ©rieur
  - "afterend"    â†’ juste aprÃ¨s lâ€™Ã©lÃ©ment
====================================================================================
*/

// SÃ©lections
const element = document.getElementById('coucou');
console.log(element);

const element2 = document.getElementsByName('user_name')[0];
console.log(element2);

const element3 = document.getElementsByTagName('p');
console.log(element3[3]); // 4e paragraphe

const element4 = document.getElementsByClassName('blue');
console.log(element4[1]); // 2e Ã©lÃ©ment avec la classe "blue"

const element5 = document.querySelector('input[type=submit]');
console.log(element5);

// SÃ©lection de tous les <h2> dans <article>
const elements = document.querySelectorAll('article h2');
for (const e of elements)
    console.log(e.textContent);

// Modification du contenu HTML
const element6 = document.getElementsByClassName('blue')[0];
element6.innerHTML = "<ul><li>ok</li></ul>"; // (corrigÃ© : <ul> fermÃ© correctement)

// Modification d'un attribut (ex : title)
element6.title = "Super chouette";

// RÃ©cupÃ©ration d'un attribut
console.log(element6.getAttribute("title"));

// Ajout d'un attribut data-* (dataset)
element6.dataset.formation = "JS"; // Ajoute data-formation="JS"
console.log(element6.dataset.formation);

// CrÃ©ation dâ€™un nouveau paragraphe
const someParagraph = document.createElement('p');
someParagraph.innerHTML = "Bonjour tout le monde !";
someParagraph.className = "red";

// Insertion du paragraphe en fin du body
document.body.append(someParagraph);

// Remplacement de #coucou par le nouveau paragraphe
const oldElement = document.getElementById("coucou");
oldElement.replaceWith(someParagraph);

// Insertion dâ€™un texte avant #coucou (mÃªme s'il est dÃ©jÃ  remplacÃ© ici)
document.getElementById("coucou")?.insertAdjacentHTML("beforebegin", "Hello world");
